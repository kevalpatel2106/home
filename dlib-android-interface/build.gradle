apply plugin: 'com.android.library'
apply from: '../misc/config.gradle'
apply from: '../misc/dependencies.gradle'

android {
    compileSdkVersion buidlConfig.compile
    buildToolsVersion buidlConfig.buildToolVersion

    compileOptions {
        sourceCompatibility javaCompatibility.sourceCompatibility
        targetCompatibility javaCompatibility.targetCompatibility
    }

    defaultConfig {
        //sdks
        minSdkVersion buidlConfig.min
        targetSdkVersion buidlConfig.target

        //strip other than english resources
        resConfigs "en"

        consumerProguardFiles proguardConfig.proguardPath
    }

    packagingOptions packageExcludes

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher false
    }
}


dependencies {
    compile supportLib.annotations
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
    }
}
apply plugin: 'com.jakewharton.hugo'

// call regular ndk-build(.cmd) script from app directory
def GetNDKDir() {
    def localProperties = new Properties()

    def NDK_SEARCH_VARS = ['ANDROID_NDK_HOME', 'ANDROID_NDK_ROOT', 'NDKROOT', 'NDKHOME']
    def ndk_path = null

    def lim = (Os.isFamily(Os.FAMILY_WINDOWS)) ? '\\' : '/'

    // Search Local.Properties file
    try {
        localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ndkDir = localProperties.getProperty('ndk.dir')
        ndk_path = ndkDir != null ? ndkDir + lim : null;
    } catch (java.io.FileNotFoundException e) {
        println 'local.properties file not found'
    }

    // Search env var
    if (ndk_path == null) {
        for (String var : NDK_SEARCH_VARS) {
            def v = System.getenv(var)

            if (v != null) {
                ndk_path = v + lim
                println "found in System Environment *$var = " + ndk_path
                break
            }
        }
    } else {
        println 'found in local.properties *NDK_PATH = ' + ndk_path
    }

    if (ndk_path == null) {
        println 'No NDK_PATH found'
        ndk_path = ''
    }
    return ndk_path
}

def NDKCommand() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return GetNDKDir() + "ndk-build.cmd"
    } else {
        return GetNDKDir() + "ndk-build"
    }
}