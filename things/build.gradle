apply plugin: 'com.android.application'
apply from: '../misc/config.gradle'
apply from: '../misc/dependencies.gradle'

android {
    signingConfigs {
        playStore {
            if (System.getenv("IS_CI_BUILD").equals("true")) {
                //It is CI build, load it from the environment variables.
                //See circle.yml file.
                storeFile file(System.getenv("KEY_STORE"))
                storePassword System.getenv("KEY_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("ALIAS_PASSWORD")
            } else {
                //If this is the local build, load it from the keystore.properties file
                File signFile = rootProject.file('./misc/keystore.properties')
                if (signFile.exists()) {
                    Properties props = new Properties()
                    props.load(new FileInputStream(signFile))

                    keyAlias props['keystore.alias']
                    keyPassword props['keystore.password']
                    storeFile file(props['keystore.file'])
                    storePassword props['keystore.aliaspassword']
                } else {
                    throw new GradleException("keystore.properties file not found.")
                }
            }
        }
    }

    compileSdkVersion buidlConfig.compile
    buildToolsVersion buidlConfig.buildToolVersion

    compileOptions {
        sourceCompatibility javaCompatibility.sourceCompatibility
        targetCompatibility javaCompatibility.targetCompatibility
    }

    defaultConfig {
        applicationId packageName.things

        //sdks
        minSdkVersion buidlConfig.min
        targetSdkVersion buidlConfig.target

        //Version config
        versionCode versionConfig.versionCode
        versionName versionConfig.versionName

        //strip other than english resources
        resConfigs "en"

        //Add keys
        if (!System.getenv("IS_CI_BUILD").equals("true")) {
            //If this is the local build, load it from the keystore.properties file
            File signFile = rootProject.file('./misc/keystore.properties')
            if (signFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(signFile))

                buildConfigField "String", "apiai_api_key", props['apiai.clientToken']
                buildConfigField "String", "api_ai_access_key", props['apiai.developerToken']
            } else {
                throw new GradleException("keystore.properties file not found.")
            }
        } else {
            buildConfigField "String", "apiai_api_key", System.getenv("API_AI_CLIENT_TOKEN")
            buildConfigField "String", "api_ai_access_key", System.getenv("API_AI_DEV_TOKEN")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardConfig.proguardPath
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            signingConfig signingConfigs.playStore
            pseudoLocalesEnabled false
            zipAlignEnabled true
        }
        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable false
            signingConfig signingConfigs.playStore
            minifyEnabled false
            zipAlignEnabled true
        }
    }

    packagingOptions packageExcludes

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher false
    }
}

dependencies {
    //Android things dependency
    provided androidThingsLib.things

    compile project(projectModule.network)
    compile project(projectModule.utils)
    compile project(':pocketsphinx-android')
    compile project(':ftp-server')

    //Test dependency
    testCompile testLib.junit

    //Support libs
    compile supportLib.appCompat

    //GSON
    compile otherLib.gson

    //Retrofit
    compile retrofitLib.retrofit
    compile retrofitLib.gsonPlugin
    compile retrofitLib.rxPlugin
    compile retrofitLib.logger

    //Firebase api
    compile firebaseLib.fcm
    compile firebaseLib.core
    compile firebaseLib.dispatcher

    //Api ai
    compile apiai.libai
    compile apiai.sdk
    compile apiai.commonsio
}
apply plugin: 'com.google.gms.google-services'
